

// javascript 모르는 부분 적어 놓는곳!




/**인수란?
 * 
 * 인수(argument)란 매개변수=인자 (parameter)에 전달 하려는 소괄호 안의 값을 인수라고 한다.
 * 값, 변수, 참조 등 전달 할 수 있다.
 * 
 * 인수(argument) : 함수를 호출할때 건네주는 변수
 * 인자(parameter) : 함수에서 정의되어 함수 내부에서 사용되는 변수, 매개변수,파라미터 라고 많이 불린다.
 * 
 * 
 * 쉽게 말해서 함수를 외부에서 호출할때는 인수(argument), 
 * 함수 내부에서 사용될 경우 인자 (parameter)=매개변수 라고 부른다.
 * 
 * 
 * 예시코드 1번 ▽
 * let num = 3; : 
 * 
 * function add13 (num) {  : add13은 함수 이름 , 그 옆의 괄호는 파라미터가 들어간다.
 * return num + 10
 * }
 * 
 * add13(num)  : add13 함수를 호출하는데 ()안에 위에서 설정된 변수 num을 호출하고 있음
 *               호출된 변수 num이 함수 내부에 설정된 파라미터 (인자,parameter)에 
 *               들어가서 return 에 설정된 식을 실행해서 console에 13이라고 나온다. 
 * 
 * 
 * 
 * 예시코드 2번 ▽
 * let num = 3;
 * 
 * function add13 (num) {
 * return num + 10 //만약 여기 식이 자체적으로 결과값을 나오게 만드는 식이었다면 add13();형식으로 인수(argument)없이 함수호출이 되더라도 값이 나왔을 것이다.
 * }
 * 
 * add13() : 위에서 설정된 add13함수를 호출하긴 하지만 인수(argument)가 없기 때문에 인자를 전달하지 모사고 JS에서는 인자,매개변수(parameter)가 설정되지 않으면 undefined 로 초기화 된다.
 *           따라서 undefined + 10  이 계산되게 되고, 'undefined'는 숫자가 아니므로 NaN(숫자가 아님)이 console창에 호출되게된다.
 * 
 */





/**
 * isAdult 는 성인 인지 아닌지를 구분해주는 프로그래밍 용어이다.
 * 데이터 베이스, 웹사이트, 애플리케이션 등에서 성인 콘텐츠를 필터링 하거나,
 * 특정연령대 이상의 사용자에겜나 콘텐츠를 제공하는 데 사용되곤 한다.
 * 
 * const isAdult = true; //성인전용
 * const isAult = false; //전연령 접속가능
 * 
 * 위와 같은 용도로 사용될때 "isAult"는 Boolean 타입으로 처리됨!
 */


/**
 * 왜 명확한 획수가 정해져 있으면 for반복문을
 * 반복해야할 횟수나 범위가 명확하지 않으면 while반복문을 쓰지?
 * 
 * 코드를 반복 실행 시켜주는 for 과 while 반복문은 반복 시켜주는 기능이 있다 라는 공통점이 있지만 차이점 역시 있다.

먼저 반복시키기 위한 형식이 다르다.

for 반복문의 경우 ▽

for( let i = 0, i <10, i++) {
console.log(i);
}

for(초기값;조건식;증감연산) {
동작문(실행하고 싶은 코드);
}

위와 같은 형식을 가진다.

for문은 조건식이 들어가 있으므로 구하고자 하는 값의 조건이 무엇인지 정확할 경우 사용한다. 또한 초기값, 조건식,증감연산이 while문과 달리 블록에서 바로 찾을 수 있기 때문에 가독성이 좋다.!

while 반복문의 경우▽

let i = 0; //초기값 선언

while(i<10) //조건 {
console.log(i);
i++ //증가 연산자
break; //반복되는 식을 멈추기!

}

ex) 무한루프 ▽

while(ture){
console.log(”실행중”)
}

ex) 변수와 증가연산자를 통해 무한 루프 멈추기 코드!

let num = 0; //num 변수 선언

while(true) { //무한루프
num++ //num의 증가 연산자
if(num === 10) break //반복문을 돌리다가 10이 되면 종료
console.log(num);

}

while문이 무한히 실해하게 되면 부라우저가 과부하가 온다. 그렇기 때문에 while문 안에는 무한루프를 종료하는 순간이 와야한다. 변수를 이용하여 false가 될때 를 지정하여무한루프를 종료하거나 break문을 사용하여 무한루프를 벗어날수 있다.

이와같이 루프를 계속 돌기 때문에 내가 구하고자 하는 값의 조건이 무엇인지 정확히 모를 경우, 유동적일 경우 while문을 사용한다.
▲ API로 받아온 코드, 다른 사람이 작성한 코드!

조건식이 false가 될때까지 무한 실행한다.
true라면 실행하고 false라면 즉시 while문이 종료된다.

※ while 반복문의 경우 중괄호 안에 i++ 증가연산자를 넣지 않으면 무한히 반복
하고, 컴퓨터의 서버는 다운되 버린다.
 * 
 */



